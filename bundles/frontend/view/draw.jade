extends ../theme/layout
block content
  .row
    h2 App
    .row
      .col-md-10
        .row
          h2 Ferramentas
        .row
          h2 Aplicacao
          canvas(id='paper')
      .col-md-2
        h2 Features
        ul
          li Feature 1
          li Feature 2
          li Feature 3
          li Feature 4
    .row
      .col-md-12
        h2 Slider 
  script(src="http://code.jquery.com/jquery-1.8.0.min.js")
  script(type="text/javascript")
    jQuery(function(){

      // This demo depends on the canvas element
      if(!('getContext' in document.createElement('canvas'))){
        alert('Sorry, it looks like your browser does not support canvas!');
        return false;
      }

      // The URL of your web server (the port is set in app.js)
      //var url = 'http://localhost:3000';
        var url = window.location.hostname;

      var doc = jQuery(document),
        canvas = jQuery('#paper'),
        ctx = canvas[0].getContext('2d'),
        instructions = jQuery('#instructions');

        // Force canvas to dynamically change its size to the same width/height
        // as the browser window.
        canvas[0].width = document.body.clientWidth;
        canvas[0].height = document.body.clientHeight;

        // ctx setup
        ctx.lineCap = 'round';
        ctx.lineJoin = 'round';
        ctx.lineWidth = 10;

      // Generate an unique ID
      var id = Math.round(jQuery.now()*Math.random());

        //Generate a random color
        var r = Math.floor(Math.random() * 255) + 70;
        var g = Math.floor(Math.random() * 255) + 70;
        var b = Math.floor(Math.random() * 255) + 70;
        var color = 'rgb(' + r + ',' + g + ',' + b + ')';

      // A flag for drawing activity
      var drawing = false;

      var clients = {};
      var cursors = {};

      var socket = io.connect(url);
      
      socket.on('moving', function (data) {
        
        if(! (data.id in clients)){
          // a new user has come online. create a cursor for them
          cursors[data.id] = jQuery('<div class="cursor">').appendTo('#cursors');
        }
        
        // Move the mouse pointer
        cursors[data.id].css({
          'left' : data.x,
          'top' : data.y
        });
        
        // Is the user drawing?
        if(data.drawing && clients[data.id]){
          
          // Draw a line on the canvas. clients[data.id] holds
          // the previous position of this user's mouse pointer

                ctx.strokeStyle = data.color;
          drawLine(clients[data.id].x, clients[data.id].y, data.x, data.y);
        }
        
        // Saving the current client state
        clients[data.id] = data;
        clients[data.id].updated = jQuery.now();
      });

      var prev = {};

        // To manage touch events
        // http://ross.posterous.com/2008/08/19/iphone-touch-events-in-javascript/

        document.addEventListener("touchstart", touchHandler, true);
        document.addEventListener("touchmove", touchHandler, true);
        document.addEventListener("touchend", touchHandler, true);
        document.addEventListener("touchcancel", touchHandler, true);

        function touchHandler(event)
        {
            var touches = event.changedTouches,
                first = touches[0],
                type = '';
            switch(event.type)
            {
                case "touchstart":
                    type = "mousedown";
                    break;
                case "touchmove":
                    type = "mousemove";
                    break;
                case "touchend":
                    type = "mouseup";
                    break;
                case "touchcancel":
                    type = "mouseup";
                    break;
                default:
                    return;
            }

            var simulatedEvent = document.createEvent("MouseEvent");
            simulatedEvent.initMouseEvent(type, true, true, window, 1,
                first.screenX, first.screenY,
                first.clientX, first.clientY, false,
                false, false, false, 0/*left*/, null);

            first.target.dispatchEvent(simulatedEvent);
            event.preventDefault();
        }

      canvas.on('mousedown', function(e){
        e.preventDefault();
        drawing = true;
        prev.x = e.pageX;
        prev.y = e.pageY;
        
        // Hide the instructions
        instructions.fadeOut();
      });
      
      doc.bind('mouseup mouseleave', function(){
        drawing = false;
      });

      var lastEmit = jQuery.now();

      doc.on('mousemove', function(e){
        if(jQuery.now() - lastEmit > 30){
          socket.emit('mousemove',{
            'x': e.pageX,
            'y': e.pageY,
            'drawing': drawing,
                    'color': color,
            'id': id
          });
          lastEmit = jQuery.now();
        }
        
        // Draw a line for the current user's movement, as it is
        // not received in the socket.on('moving') event above
        
        if(drawing){

                ctx.strokeStyle = color;
          drawLine(prev.x, prev.y, e.pageX, e.pageY);

          prev.x = e.pageX;
          prev.y = e.pageY;
        }
      });

      // Remove inactive clients after 10 seconds of inactivity
        setInterval(function(){
            var totalOnline = 0;
            for(var ident in clients){
                if(jQuery.now() - clients[ident].updated > 10000){

                    // Last update was more than 10 seconds ago.
                    // This user has probably closed the page

                    cursors[ident].remove();
                    delete clients[ident];
                    delete cursors[ident];
                }
                else totalOnline++;
            }
            jQuery('#onlineCounter').html('Players Connected: '+totalOnline);
        },10000);

      function drawLine(fromx, fromy, tox, toy){
            ctx.beginPath();
        ctx.moveTo(fromx, fromy);
        ctx.lineTo(tox, toy);
        ctx.stroke();
      }

    });